{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Asset Manager Documentation About this site This website contains: requirements and design documents user guide","title":"Home"},{"location":"#asset-manager-documentation","text":"","title":"Asset Manager Documentation"},{"location":"#about-this-site","text":"This website contains: requirements and design documents user guide","title":"About this site"},{"location":"design/design/","text":"Asset Manager Design Goals Shareable Objects Use the same code for data entities and other processing which are common to both level processes: + Submission packages + Metadata + Test initiators + Test Results + Logs Validation Dynamic Discovery Some operations involve a set of tests against an object. Tests will be discoverable, and will be written in terms of an interface: a template which developers can use to extend the set of tests. The goal is to allow a developer to create or modify tests without a full release of the framework. These tests are best grouped by the object of the test, such as a delivery packet, a folder, or a work folder structure (e.g. files and folders)","title":"Design"},{"location":"design/design/#asset-manager-design","text":"","title":"Asset Manager Design"},{"location":"design/design/#goals","text":"","title":"Goals"},{"location":"design/design/#shareable-objects","text":"Use the same code for data entities and other processing which are common to both level processes: + Submission packages + Metadata + Test initiators + Test Results + Logs","title":"Shareable Objects"},{"location":"design/design/#validation-dynamic-discovery","text":"Some operations involve a set of tests against an object. Tests will be discoverable, and will be written in terms of an interface: a template which developers can use to extend the set of tests. The goal is to allow a developer to create or modify tests without a full release of the framework. These tests are best grouped by the object of the test, such as a delivery packet, a folder, or a work folder structure (e.g. files and folders)","title":"Validation Dynamic Discovery"},{"location":"req/requirements/","text":"Asset Manager Requirements Overview The Asset Manager project intends to meet two important BDRC needs: Reduce the backlog of images which we have scanned and catalogued, but are not yet available to the web users. Enhance the integrity of new scans by allowing iterations of scanning, review, changes, and re-scanning in the field. Referenced documents [1] Digitization standards Folder Structure [2] bdrc-audit prototype to do list Definitions Work A Work is the denomination of submitted content. The work's name is it's \"key\" field, and is its well-known name. Submittal A submittal, or submission, is the content od the \"work,\" along with metadata which directs its entry into the Asset Manager (for example, the work name) As in any good software practice, the public name of a work or submittal is editable, while it's internal identifier remains unchanged. Scope of Asset Manager Acquisition channels The Asset Manager will process new scanned packages, but will also maintain an inventory of our backlog of unpublished assets. It will support the three channels of acquisition: The previously submitted backlog of catalogued holdings, which need processing before they are suitable for deployment. The output of ongoing BDRC managed projects, such as USAID, EAP, FPL, and ACIP Mongolia Unsolicited input in a variety of formats. Partial Progress A complete content package contains three copies of the content, in containers named: sources archive web Sources is the unprocessed output of the scanning device or camera, or of software. Archive is ??? Web is the processed images which are suitable for download. BDRC contributors do not always present all the copies of the content at the same time. Often, the web deliverable is the first to arrive. Asset Manager presents a packaging interface which supports partial submittals and tracking of submittal progress. Asset Manager user profiles The Asset Manager suite supports different profiles of users. There is no current requirement to restrict functionality by user. If a user has access to the application, they can perform any function on it. The Asset Manager never deletes a resource, it only changes the state information of the resource's metadata. All those changes are reversible. User communities are: BDRC library users: These are our end consumers of tbrc.org .Their capacity to use the TBRC website is determined by their computers' image processing and network power. One end of capability, is graphics workstations attached to the Internet backbone. At the other end, they are Nepali or Tibetan monks referring to an image on a cell phone served by a 2 or 3G cellular service. Field scanning staff: This group contains all the BDRC employees and contractors who perform the first level of scanning, review, and intake of digital media. Reference 1 contains details of these user profiles. Curation staff: These are the BDRC archivists and librarians who manage the processing and deployment of BDRC holdings. Functional Requirements This document groups the Asset Manager requirements into three buckets: Audit Tool : The requirements for a component which allows BDRC field managers to review a submission and approve or reject it. Asset Manager : A platform which allows a user to: Review status of scans: not started, underway, complete Validate that packages meet standards. The Audit Tool functionality will be in the Asset Manager: Audit Tool is a repackaging designed for installation in remote systems. Invoke image processing tools to prepare images for web deployment. Deploy works to the BDRC web. Shared Requirements Testing: Provide tests in a code format which both tools can use Reporting: show the passing or failing of tests, and the processing results of processing steps Package building: A component which creates a package which Audit Tool and Asset Manager can consume. Audit Tool The Audit Tool use case is shown here: The audit tool supports multiple users who can submit, review, and approve or reject submissions. It also supports transferring to asset manager a package which contains both the content and the required metadata. It has limited reporting capability, as it is meant to be decentralized, and work only on standalone computers, operating on a local disk. In the diagram above, \"Run Tests\" means to run a specified set of tests to evaluate the submission's integrity. Asset Manager The Asset Manager use case is shown below: The Asset Manager includes the auditing tools and also provides management facilities for tracking submission progress, image processing and web deployment. All the specific areas below will present interfaces for changing a submittal's state. Workflow High level flowchart of Asset Manager and Audit tool Asset Manager functionality This section lists the functions of the asset manager. Review Users access a dashboard which shows the processing status of collections which are awaiting processing. Test submission Perform the same tests as the Audit Tool does. Process Control Users control the image processing: launch and monitor processing workflows. Image processing Use external resources (either open source libraries, or possibly third party network APIs) to process images. Processing steps include: Determining values for the following parameters, and saving those into a recipe: optimal cropping box for the contents. a de-skewing transform, to remove any effects of image or camera tilt. some limited color correction Storing and linking output Derived image creation Create derivative file formats form the archival masters. OCR Transmit images to a web service which will return text and other metadata. Further processing for this metadata is TBD. Web deployment Deploy some of the derivative works and selected metadata to the BDRC display platforms. Asset manager will allow updating of sections of works at any level of granularity from the work down to the individual image. Shared Requirements These requirements are drawn from - Asset Manager v.01 Core Requirements - Asset Manager v-1.0 - And the to-do section of BDRC Audit Prototype README See Test Requirements for detailed requirements. Number of files per folder File Type Requirement Canonical paths Audit biblio-sheet Validate upload package Detailed Requirements Audit Tool Host Platform The Audit Tool has to be deployable by BDRC onto any MacOS or Windows 7+ PC within a reasonable length of time. The BDRC people should know how to configure the Audit Tool. Invocation Launch The Audit Tool should be callable from the command line of either platform. The command line invocation should either start a text-mode or a windowed dialog. The dialog prompts the user for the directory containing the scans. Operation Either of these prompts can be given as arguments 1. Prompt the user for the location of the single work to operate on. 2. Select the operation: - Perform Tests - Fill in biblio-data - Build package perform tests the user selects test from a list. Some tests are required, some are optional. The platform will show which is which. The system runs each test in turn, and records the results. The system displays the results. Test Requirements documents each test's parameters and success criteria. Enter biblio-data The system prompts the user for the bibliographical data. It saves the data in a format which the package builder will include. The biblio-data might be what the scanning operator or their project manager input into the spreadsheet (see Bibliographic Data Sheet ) Implementation note: The python xlrd package supports extracting data from an Excel sheet. If we truly require input sheets to be .xlsx format, we could consider expanding the biblio-sheet to include the data which auditing requires. That would validate the biblio sheet first. ) The biblio sheet must include at a minimum: Work Name Volumes Names Scan Date Info on person who scanned the document (BDRC ref number, or email, or name, or some combination) Any other information the Asset Manager requires This will be an ongoing requirement. The Audit tool validation mechanism may be changed with every release. If needed, it will provide the Excel template for the biblio-data. Build upload package The user invokes the build package through the user interface. The system: runs all the required tests. If they pass, it builds the upload package only if this invocation of the tests passes. The upload package contains: - production information: - Scanning organization - BDRC Personnel sign-off: - DPE - FR - DPM - submitter id: a valid email address for the submitter. - work information: (see biblio-data above) The sign-offs are only required for the Asset Manager to intake the submittal package. A DPE or FR can sign their portions, but the DPM has to add their signature to the package before the Asset Manager will accept it. Package Uploader Upload the package. If the package passes the Validate upload package test, this facility transfers it to a resource where further processing can occur.[^Todiscuss] [^Todiscuss]: This should be a separate, controlled facility. We don't want DPEs or FRs to upload.","title":"Asset Manager Requirements"},{"location":"req/requirements/#asset-manager-requirements","text":"","title":"Asset Manager Requirements"},{"location":"req/requirements/#overview","text":"The Asset Manager project intends to meet two important BDRC needs: Reduce the backlog of images which we have scanned and catalogued, but are not yet available to the web users. Enhance the integrity of new scans by allowing iterations of scanning, review, changes, and re-scanning in the field.","title":"Overview"},{"location":"req/requirements/#referenced-documents","text":"[1] Digitization standards Folder Structure [2] bdrc-audit prototype to do list","title":"Referenced documents"},{"location":"req/requirements/#definitions","text":"Work A Work is the denomination of submitted content. The work's name is it's \"key\" field, and is its well-known name. Submittal A submittal, or submission, is the content od the \"work,\" along with metadata which directs its entry into the Asset Manager (for example, the work name) As in any good software practice, the public name of a work or submittal is editable, while it's internal identifier remains unchanged.","title":"Definitions"},{"location":"req/requirements/#scope-of-asset-manager","text":"","title":"Scope of Asset Manager"},{"location":"req/requirements/#acquisition-channels","text":"The Asset Manager will process new scanned packages, but will also maintain an inventory of our backlog of unpublished assets. It will support the three channels of acquisition: The previously submitted backlog of catalogued holdings, which need processing before they are suitable for deployment. The output of ongoing BDRC managed projects, such as USAID, EAP, FPL, and ACIP Mongolia Unsolicited input in a variety of formats.","title":"Acquisition channels"},{"location":"req/requirements/#partial-progress","text":"A complete content package contains three copies of the content, in containers named: sources archive web Sources is the unprocessed output of the scanning device or camera, or of software. Archive is ??? Web is the processed images which are suitable for download. BDRC contributors do not always present all the copies of the content at the same time. Often, the web deliverable is the first to arrive. Asset Manager presents a packaging interface which supports partial submittals and tracking of submittal progress.","title":"Partial Progress"},{"location":"req/requirements/#asset-manager-user-profiles","text":"The Asset Manager suite supports different profiles of users. There is no current requirement to restrict functionality by user. If a user has access to the application, they can perform any function on it. The Asset Manager never deletes a resource, it only changes the state information of the resource's metadata. All those changes are reversible. User communities are: BDRC library users: These are our end consumers of tbrc.org .Their capacity to use the TBRC website is determined by their computers' image processing and network power. One end of capability, is graphics workstations attached to the Internet backbone. At the other end, they are Nepali or Tibetan monks referring to an image on a cell phone served by a 2 or 3G cellular service. Field scanning staff: This group contains all the BDRC employees and contractors who perform the first level of scanning, review, and intake of digital media. Reference 1 contains details of these user profiles. Curation staff: These are the BDRC archivists and librarians who manage the processing and deployment of BDRC holdings.","title":"Asset Manager user profiles"},{"location":"req/requirements/#functional-requirements","text":"This document groups the Asset Manager requirements into three buckets: Audit Tool : The requirements for a component which allows BDRC field managers to review a submission and approve or reject it. Asset Manager : A platform which allows a user to: Review status of scans: not started, underway, complete Validate that packages meet standards. The Audit Tool functionality will be in the Asset Manager: Audit Tool is a repackaging designed for installation in remote systems. Invoke image processing tools to prepare images for web deployment. Deploy works to the BDRC web. Shared Requirements Testing: Provide tests in a code format which both tools can use Reporting: show the passing or failing of tests, and the processing results of processing steps Package building: A component which creates a package which Audit Tool and Asset Manager can consume.","title":"Functional Requirements"},{"location":"req/requirements/#audit-tool","text":"The Audit Tool use case is shown here: The audit tool supports multiple users who can submit, review, and approve or reject submissions. It also supports transferring to asset manager a package which contains both the content and the required metadata. It has limited reporting capability, as it is meant to be decentralized, and work only on standalone computers, operating on a local disk. In the diagram above, \"Run Tests\" means to run a specified set of tests to evaluate the submission's integrity.","title":"Audit Tool"},{"location":"req/requirements/#asset-manager","text":"The Asset Manager use case is shown below: The Asset Manager includes the auditing tools and also provides management facilities for tracking submission progress, image processing and web deployment. All the specific areas below will present interfaces for changing a submittal's state.","title":"Asset Manager"},{"location":"req/requirements/#workflow","text":"High level flowchart of Asset Manager and Audit tool","title":"Workflow"},{"location":"req/requirements/#asset-manager-functionality","text":"This section lists the functions of the asset manager.","title":"Asset Manager functionality"},{"location":"req/requirements/#review","text":"Users access a dashboard which shows the processing status of collections which are awaiting processing.","title":"Review"},{"location":"req/requirements/#test-submission","text":"Perform the same tests as the Audit Tool does.","title":"Test submission"},{"location":"req/requirements/#process-control","text":"Users control the image processing: launch and monitor processing workflows.","title":"Process Control"},{"location":"req/requirements/#image-processing","text":"Use external resources (either open source libraries, or possibly third party network APIs) to process images. Processing steps include: Determining values for the following parameters, and saving those into a recipe: optimal cropping box for the contents. a de-skewing transform, to remove any effects of image or camera tilt. some limited color correction Storing and linking output","title":"Image processing"},{"location":"req/requirements/#derived-image-creation","text":"Create derivative file formats form the archival masters.","title":"Derived image creation"},{"location":"req/requirements/#ocr","text":"Transmit images to a web service which will return text and other metadata. Further processing for this metadata is TBD.","title":"OCR"},{"location":"req/requirements/#web-deployment","text":"Deploy some of the derivative works and selected metadata to the BDRC display platforms. Asset manager will allow updating of sections of works at any level of granularity from the work down to the individual image.","title":"Web deployment"},{"location":"req/requirements/#shared-requirements","text":"These requirements are drawn from - Asset Manager v.01 Core Requirements - Asset Manager v-1.0 - And the to-do section of BDRC Audit Prototype README See Test Requirements for detailed requirements. Number of files per folder File Type Requirement Canonical paths Audit biblio-sheet Validate upload package","title":"Shared Requirements"},{"location":"req/requirements/#detailed-requirements","text":"","title":"Detailed Requirements"},{"location":"req/requirements/#audit-tool_1","text":"","title":"Audit Tool"},{"location":"req/requirements/#host-platform","text":"The Audit Tool has to be deployable by BDRC onto any MacOS or Windows 7+ PC within a reasonable length of time. The BDRC people should know how to configure the Audit Tool.","title":"Host Platform"},{"location":"req/requirements/#invocation","text":"","title":"Invocation"},{"location":"req/requirements/#launch","text":"The Audit Tool should be callable from the command line of either platform. The command line invocation should either start a text-mode or a windowed dialog. The dialog prompts the user for the directory containing the scans.","title":"Launch"},{"location":"req/requirements/#operation","text":"Either of these prompts can be given as arguments 1. Prompt the user for the location of the single work to operate on. 2. Select the operation: - Perform Tests - Fill in biblio-data - Build package","title":"Operation"},{"location":"req/requirements/#perform-tests","text":"the user selects test from a list. Some tests are required, some are optional. The platform will show which is which. The system runs each test in turn, and records the results. The system displays the results. Test Requirements documents each test's parameters and success criteria.","title":"perform tests"},{"location":"req/requirements/#enter-biblio-data","text":"The system prompts the user for the bibliographical data. It saves the data in a format which the package builder will include. The biblio-data might be what the scanning operator or their project manager input into the spreadsheet (see Bibliographic Data Sheet ) Implementation note: The python xlrd package supports extracting data from an Excel sheet. If we truly require input sheets to be .xlsx format, we could consider expanding the biblio-sheet to include the data which auditing requires. That would validate the biblio sheet first. ) The biblio sheet must include at a minimum: Work Name Volumes Names Scan Date Info on person who scanned the document (BDRC ref number, or email, or name, or some combination) Any other information the Asset Manager requires This will be an ongoing requirement. The Audit tool validation mechanism may be changed with every release. If needed, it will provide the Excel template for the biblio-data.","title":"Enter biblio-data"},{"location":"req/requirements/#build-upload-package","text":"The user invokes the build package through the user interface. The system: runs all the required tests. If they pass, it builds the upload package only if this invocation of the tests passes. The upload package contains: - production information: - Scanning organization - BDRC Personnel sign-off: - DPE - FR - DPM - submitter id: a valid email address for the submitter. - work information: (see biblio-data above) The sign-offs are only required for the Asset Manager to intake the submittal package. A DPE or FR can sign their portions, but the DPM has to add their signature to the package before the Asset Manager will accept it.","title":"Build upload package"},{"location":"req/requirements/#package-uploader","text":"Upload the package. If the package passes the Validate upload package test, this facility transfers it to a resource where further processing can occur.[^Todiscuss] [^Todiscuss]: This should be a separate, controlled facility. We don't want DPEs or FRs to upload.","title":"Package Uploader"},{"location":"req/tests/","text":"Test Requirements this document defines each test in Requirements See Digitization standards Folder Structure and bdrc-audit prototype to do list The test subject is a set of files in a path. The audit user inputs test parameters. Each test may have its own set of parameters. For most tests, the required input is the container of a project . This structure is named the Standard Project Structure The container is a folder which contains: - a Bibliographic Info Sheet in Excel format - a directory named \"archive\" which contains subfolders (no naming convention) - a directory named \"images\" which contains subfolders (no naming convention) Audit number of files per folder Test Parameters Path to a folder containing a Standard Project Structure Success criteria: Passes only when: every subfolder contains only files whose file name ends with a number. The numbers in the file name endings form a series 1..n where n is the number of files in the folder. * Numbers may contain leading zeroes. It is not required that each file contain the same format. For example, W42_I4242_0001.jpg W42_I4242_2.jpg is a valid sequence for a two file folder. File Type Test parameters Path to a folder containing a Standard Project Structure a designation of the folder containing the archival master (default name: archive ) a designation of the folder containing the web images (default name: images ) Success criteria: Passes only when: * the archive files contain only images which match these requirements: Feature Standard File format JPEG 2000 (.j2k), wavelets compression, highest data size Resolution 600 ppi/dpi Color profile RGB, 24-bits Pixel dimensions consistent width ~~Quality~~ ~~1 page per image, no borders, no scan lines, no artifacts~~ The Quality aspect cannot be determined by programmatic inspection, so it is not a requirement in the audit phase. the web images folder files have the following properties: Feature Standard File Format JPEG (.jpg) for color pages, TIFF G4 compression (.tif) for text only pages Resolution consistent ppi/dpi Color Profile RGB 24-bits for JPEG, BW 1-bit for TIFF Pixel dimensions consistent width File size smaller than 400 KB Canonical paths Test Parameters Path to a folder containing a Standard Project Structure Work Name: an unformatted text string Volume names: a list of unformatted text strings, representing the volumes in the work. Note this document does not specify formats for work and volume names. Success Criteria This test passes when: the last element of the project folder is the work name. The project folder contains one folder for each given volume. Audit Biblio-sheets Needs more detail","title":"Test Requirements"},{"location":"req/tests/#test-requirements","text":"this document defines each test in Requirements See Digitization standards Folder Structure and bdrc-audit prototype to do list The test subject is a set of files in a path. The audit user inputs test parameters. Each test may have its own set of parameters. For most tests, the required input is the container of a project . This structure is named the Standard Project Structure The container is a folder which contains: - a Bibliographic Info Sheet in Excel format - a directory named \"archive\" which contains subfolders (no naming convention) - a directory named \"images\" which contains subfolders (no naming convention)","title":"Test Requirements"},{"location":"req/tests/#audit-number-of-files-per-folder","text":"","title":"Audit number of files per folder"},{"location":"req/tests/#test-parameters","text":"Path to a folder containing a Standard Project Structure","title":"Test Parameters"},{"location":"req/tests/#success-criteria","text":"Passes only when: every subfolder contains only files whose file name ends with a number. The numbers in the file name endings form a series 1..n where n is the number of files in the folder. * Numbers may contain leading zeroes. It is not required that each file contain the same format. For example, W42_I4242_0001.jpg W42_I4242_2.jpg is a valid sequence for a two file folder.","title":"Success criteria:"},{"location":"req/tests/#file-type","text":"","title":"File Type"},{"location":"req/tests/#test-parameters_1","text":"Path to a folder containing a Standard Project Structure a designation of the folder containing the archival master (default name: archive ) a designation of the folder containing the web images (default name: images )","title":"Test parameters"},{"location":"req/tests/#success-criteria_1","text":"Passes only when: * the archive files contain only images which match these requirements: Feature Standard File format JPEG 2000 (.j2k), wavelets compression, highest data size Resolution 600 ppi/dpi Color profile RGB, 24-bits Pixel dimensions consistent width ~~Quality~~ ~~1 page per image, no borders, no scan lines, no artifacts~~ The Quality aspect cannot be determined by programmatic inspection, so it is not a requirement in the audit phase. the web images folder files have the following properties: Feature Standard File Format JPEG (.jpg) for color pages, TIFF G4 compression (.tif) for text only pages Resolution consistent ppi/dpi Color Profile RGB 24-bits for JPEG, BW 1-bit for TIFF Pixel dimensions consistent width File size smaller than 400 KB","title":"Success criteria:"},{"location":"req/tests/#canonical-paths","text":"","title":"Canonical paths"},{"location":"req/tests/#test-parameters_2","text":"Path to a folder containing a Standard Project Structure Work Name: an unformatted text string Volume names: a list of unformatted text strings, representing the volumes in the work. Note this document does not specify formats for work and volume names.","title":"Test Parameters"},{"location":"req/tests/#success-criteria_2","text":"This test passes when: the last element of the project folder is the work name. The project folder contains one folder for each given volume.","title":"Success Criteria"},{"location":"req/tests/#audit-biblio-sheets","text":"Needs more detail","title":"Audit Biblio-sheets"},{"location":"resources/about/","text":"Building this document This website was built under the following environment: - Python 3.7.1 - mkdocs 1.0.4 - mkdocs-cinder 0.1.4 - - Asset Manager Git hub project pages update from gh-pages option is selected, because we use an outside theme, not a GH Jekyll theme. The mkdocs-windmill theme was considered, but it doesn't work with mkdocs 1.0 mkdocs-windmill Issue #30 The documents are largely edited in Atom , because of its awesome image capturing capability, and its generally better Makrdown preview than pyCharm (where most of the Python development is being done.)","title":"About"},{"location":"resources/about/#building-this-document","text":"This website was built under the following environment: - Python 3.7.1 - mkdocs 1.0.4 - mkdocs-cinder 0.1.4 - - Asset Manager Git hub project pages update from gh-pages option is selected, because we use an outside theme, not a GH Jekyll theme. The mkdocs-windmill theme was considered, but it doesn't work with mkdocs 1.0 mkdocs-windmill Issue #30 The documents are largely edited in Atom , because of its awesome image capturing capability, and its generally better Makrdown preview than pyCharm (where most of the Python development is being done.)","title":"Building this document"},{"location":"resources/resources/","text":"Resources Source https://github.com/buda-base/asset-manager Trello Project Management These resources are available only to the BDRC Team and selected observers. if you require access, please request to jimk AT tbrc DOT org Audit Tool Asset Manager Other Images Other Documents Notes from 2018-9-07 Core Requirements docs These documents are maintained in a shared Google Drive Folder, Asset Manager Asset Manager v.01 Core Requirements Asset Manager v-1.0 Asset Manager Notes Clearest statement of workflow.","title":"References"},{"location":"resources/resources/#resources","text":"","title":"Resources"},{"location":"resources/resources/#source","text":"https://github.com/buda-base/asset-manager","title":"Source"},{"location":"resources/resources/#trello-project-management","text":"These resources are available only to the BDRC Team and selected observers. if you require access, please request to jimk AT tbrc DOT org","title":"Trello Project Management"},{"location":"resources/resources/#audit-tool","text":"","title":"Audit Tool"},{"location":"resources/resources/#asset-manager","text":"","title":"Asset Manager"},{"location":"resources/resources/#other-images","text":"","title":"Other Images"},{"location":"resources/resources/#other-documents","text":"Notes from 2018-9-07","title":"Other Documents"},{"location":"resources/resources/#core-requirements-docs","text":"These documents are maintained in a shared Google Drive Folder, Asset Manager Asset Manager v.01 Core Requirements Asset Manager v-1.0 Asset Manager Notes Clearest statement of workflow.","title":"Core Requirements docs"}]}