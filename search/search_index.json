{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Asset Manager Documentation About this site This website contains: requirements and design documents user guide","title":"Home"},{"location":"#asset-manager-documentation","text":"","title":"Asset Manager Documentation"},{"location":"#about-this-site","text":"This website contains: requirements and design documents user guide","title":"About this site"},{"location":"design/design/","text":"Asset Manager Design Goals Shareable Objects Use the same code for data entities and other processing which are common to both level processes: + Submission packages + Metadata + Test initiators + Test Results + Logs Validation Dynamic Discovery Some operations involve a set of tests against an object. Tests will be discoverable, and will be written in terms of an interface: a template which developers can use to extend the set of tests. The goal is to allow a developer to create or modify tests without a full release of the framework. These tests are best grouped by the object of the test, such as a delivery packet, a folder, or a work folder structure (e.g. files and folders)","title":"Design"},{"location":"design/design/#asset-manager-design","text":"","title":"Asset Manager Design"},{"location":"design/design/#goals","text":"","title":"Goals"},{"location":"design/design/#shareable-objects","text":"Use the same code for data entities and other processing which are common to both level processes: + Submission packages + Metadata + Test initiators + Test Results + Logs","title":"Shareable Objects"},{"location":"design/design/#validation-dynamic-discovery","text":"Some operations involve a set of tests against an object. Tests will be discoverable, and will be written in terms of an interface: a template which developers can use to extend the set of tests. The goal is to allow a developer to create or modify tests without a full release of the framework. These tests are best grouped by the object of the test, such as a delivery packet, a folder, or a work folder structure (e.g. files and folders)","title":"Validation Dynamic Discovery"},{"location":"req/requirements/","text":"Asset Manager Requirements Overview The Asset Manager project intends to meet two important BDRC needs: Reduce the backlog of images which we have scanned and catalogued, but are not yet available to the web users. Enhance the integrity of new scans by allowing iterations of scanning, review, changes, and re-scanning in the field. This document groups these requirements into three buckets: Audit Tool : The requirements for a component which allows BDRC field managers to review a submission and approve or reject it. Asset Manager : A platform which allows a user to: Review status of scans: not started, underway, complete Validate that packages meet standards Invoke image processing tools to prepare images for web deployment. Deploy works to the BDRC web. Shared Requirements Testing: Provide tests in a code format which both tools can use Reporting: show the passing or failing of tests, and the processing results of processing steps Package building: A component which creates a package which Audit Tool and Asset Manager can consume. References Ngawang Trinley Buddhist Digital Resource Center Digitization Guidelines Design Documents: Audit Tool The Audit Tool use case is shown here: The audit tool supports multiple users who can submit, review, and approve or reject submissions. It also supports transferring to asset manager a package which contains both the content and the required metadata. It has limited reporting capability, as it is meant to be decentralized, and work only on standalone computers, operating on a local disk. In the diagram above, \"Run Tests\" means to run a specified set of tests to evaluate the submission's integrity. These tests include Asset Manager The Asset Manager use case is shown below: The Asset Manager provides a richer set of operations. Review Users access a dashboard which shows the processing status of collections which are awaiting processing. Test submission Perform the same tests as the Audit Tool does. Process Control Users control the image processing: launch and monitor processing workflows. Image processing Use external resources (either open source libraries, or possibly third party network APIs) to process images. Processing steps include: Determining values for the following parameters, and saving those into a recipe: optimal cropping box for the contents. a deskewing transform, to remove any effects of image or camera tilt. some limited color correction Storing and linking output Derived image creation Create derivative file formats form the archival masters. OCR Transmit images to a web service which will return text and other metadata. Further processing for this metadata is TBD. Web deployment Deploy some of the derivative works and selected metadata to the BDRC display platforms. Shared Requirements These requirements are drawn from - Asset Manager v.01 Core Requirements - Asset Manager v-1.0 - And the to-do section of BDRC Audit Prototype README Test Audit Tool Asset Manager Comments Item/Volume Requirement \u2705 \u2705 File Type Requirement \u2705 \u2705 Canonical paths \u2705 \u2705 File Sequences / Number of Files \u2705 \u2705 Validate biblio-sheet \u2705 \u274c Internal image size/ppi \u2705 \u2705 Validate upload package \u2705 \u2705 Detailed Requirements Audit Tool Host Platform The Audit Tool has to be deployable by BDRC onto any MacOS or Windows 7+ PC within a reasonable length of time. The BDRC people should know how to configure the Audit Tool. Invocation Launch The Audit Tool should be callable from the command line of either platform. The command line invocation should either start a text-mode or a windowed dialog. The dialog prompts the user for the directory containing the scans. Operation Either of these prompts can be given as arguments 1. Prompt the user for the location of the single work to operate on. 2. Select the operation: - Perform Tests - Fill in biblio-data - Build package perform tests the user selects test from a list. Some tests are required, some are optional. The platform will show which is which. The system runs each test in turn, and records the results. The system displays the results. Enter biblio-data The system prompts the user for the bibliographical data. It saves the data in a format which the package builder will include. Details are needed . Build upload package The system runs all the required tests. The system builds the upload package only if this invocation of the tests passes. The upload package contains: production information: Scanning organization BDRC Personnel sign-off: DPE FR DPM The sign-offs are only required for the Asset Manager to intake the submittal package. A DPE or FR can sign their portions, but the DPM has to add their signature to the package before the Asset Manager will accept it. - submitter id: a valid email address for the submitter. - work information: (see biblio-data above) Package Uploader Upload the package. If the package passes the Validate upload package test, this facility transfers it to a resource where further processing can occur.[^Todiscuss] [^Todiscuss]: This should be a separate, controlled facility. We don't want DPEs or FRs to upload.","title":"Requirements"},{"location":"req/requirements/#asset-manager-requirements","text":"","title":"Asset Manager Requirements"},{"location":"req/requirements/#overview","text":"The Asset Manager project intends to meet two important BDRC needs: Reduce the backlog of images which we have scanned and catalogued, but are not yet available to the web users. Enhance the integrity of new scans by allowing iterations of scanning, review, changes, and re-scanning in the field. This document groups these requirements into three buckets: Audit Tool : The requirements for a component which allows BDRC field managers to review a submission and approve or reject it. Asset Manager : A platform which allows a user to: Review status of scans: not started, underway, complete Validate that packages meet standards Invoke image processing tools to prepare images for web deployment. Deploy works to the BDRC web. Shared Requirements Testing: Provide tests in a code format which both tools can use Reporting: show the passing or failing of tests, and the processing results of processing steps Package building: A component which creates a package which Audit Tool and Asset Manager can consume.","title":"Overview"},{"location":"req/requirements/#references","text":"Ngawang Trinley Buddhist Digital Resource Center Digitization Guidelines Design Documents:","title":"References"},{"location":"req/requirements/#audit-tool","text":"The Audit Tool use case is shown here: The audit tool supports multiple users who can submit, review, and approve or reject submissions. It also supports transferring to asset manager a package which contains both the content and the required metadata. It has limited reporting capability, as it is meant to be decentralized, and work only on standalone computers, operating on a local disk. In the diagram above, \"Run Tests\" means to run a specified set of tests to evaluate the submission's integrity. These tests include","title":"Audit Tool"},{"location":"req/requirements/#asset-manager","text":"The Asset Manager use case is shown below: The Asset Manager provides a richer set of operations.","title":"Asset Manager"},{"location":"req/requirements/#review","text":"Users access a dashboard which shows the processing status of collections which are awaiting processing.","title":"Review"},{"location":"req/requirements/#test-submission","text":"Perform the same tests as the Audit Tool does.","title":"Test submission"},{"location":"req/requirements/#process-control","text":"Users control the image processing: launch and monitor processing workflows.","title":"Process Control"},{"location":"req/requirements/#image-processing","text":"Use external resources (either open source libraries, or possibly third party network APIs) to process images. Processing steps include: Determining values for the following parameters, and saving those into a recipe: optimal cropping box for the contents. a deskewing transform, to remove any effects of image or camera tilt. some limited color correction Storing and linking output","title":"Image processing"},{"location":"req/requirements/#derived-image-creation","text":"Create derivative file formats form the archival masters.","title":"Derived image creation"},{"location":"req/requirements/#ocr","text":"Transmit images to a web service which will return text and other metadata. Further processing for this metadata is TBD.","title":"OCR"},{"location":"req/requirements/#web-deployment","text":"Deploy some of the derivative works and selected metadata to the BDRC display platforms.","title":"Web deployment"},{"location":"req/requirements/#shared-requirements","text":"These requirements are drawn from - Asset Manager v.01 Core Requirements - Asset Manager v-1.0 - And the to-do section of BDRC Audit Prototype README Test Audit Tool Asset Manager Comments Item/Volume Requirement \u2705 \u2705 File Type Requirement \u2705 \u2705 Canonical paths \u2705 \u2705 File Sequences / Number of Files \u2705 \u2705 Validate biblio-sheet \u2705 \u274c Internal image size/ppi \u2705 \u2705 Validate upload package \u2705 \u2705","title":"Shared Requirements"},{"location":"req/requirements/#detailed-requirements","text":"","title":"Detailed Requirements"},{"location":"req/requirements/#audit-tool_1","text":"","title":"Audit Tool"},{"location":"req/requirements/#host-platform","text":"The Audit Tool has to be deployable by BDRC onto any MacOS or Windows 7+ PC within a reasonable length of time. The BDRC people should know how to configure the Audit Tool.","title":"Host Platform"},{"location":"req/requirements/#invocation","text":"","title":"Invocation"},{"location":"req/requirements/#launch","text":"The Audit Tool should be callable from the command line of either platform. The command line invocation should either start a text-mode or a windowed dialog. The dialog prompts the user for the directory containing the scans.","title":"Launch"},{"location":"req/requirements/#operation","text":"Either of these prompts can be given as arguments 1. Prompt the user for the location of the single work to operate on. 2. Select the operation: - Perform Tests - Fill in biblio-data - Build package","title":"Operation"},{"location":"req/requirements/#perform-tests","text":"the user selects test from a list. Some tests are required, some are optional. The platform will show which is which. The system runs each test in turn, and records the results. The system displays the results.","title":"perform tests"},{"location":"req/requirements/#enter-biblio-data","text":"The system prompts the user for the bibliographical data. It saves the data in a format which the package builder will include. Details are needed .","title":"Enter biblio-data"},{"location":"req/requirements/#build-upload-package","text":"The system runs all the required tests. The system builds the upload package only if this invocation of the tests passes. The upload package contains: production information: Scanning organization BDRC Personnel sign-off: DPE FR DPM The sign-offs are only required for the Asset Manager to intake the submittal package. A DPE or FR can sign their portions, but the DPM has to add their signature to the package before the Asset Manager will accept it. - submitter id: a valid email address for the submitter. - work information: (see biblio-data above)","title":"Build upload package"},{"location":"req/requirements/#package-uploader","text":"Upload the package. If the package passes the Validate upload package test, this facility transfers it to a resource where further processing can occur.[^Todiscuss] [^Todiscuss]: This should be a separate, controlled facility. We don't want DPEs or FRs to upload.","title":"Package Uploader"},{"location":"resources/about/","text":"Building this document This website was built under the following environment: - Python 3.7.1 - mkdocs 1.0.4 - mkdocs-cinder 0.1.4 - - Asset Manager Git hub project pages update from gh-pages option is selected, because we use an outside theme, not a GH Jekyll theme. The mkdocs-windmill theme was considered, but it doesn't work with mkdocs 1.0 mkdocs-windmill Issue #30 The documents are largely edited in Atom , because of its awesome image capturing capability, and its generally better Makrdown preview than pyCharm (where most of the Python development is being done.)","title":"About"},{"location":"resources/about/#building-this-document","text":"This website was built under the following environment: - Python 3.7.1 - mkdocs 1.0.4 - mkdocs-cinder 0.1.4 - - Asset Manager Git hub project pages update from gh-pages option is selected, because we use an outside theme, not a GH Jekyll theme. The mkdocs-windmill theme was considered, but it doesn't work with mkdocs 1.0 mkdocs-windmill Issue #30 The documents are largely edited in Atom , because of its awesome image capturing capability, and its generally better Makrdown preview than pyCharm (where most of the Python development is being done.)","title":"Building this document"},{"location":"resources/resources/","text":"Resources Source https://github.com/buda-base/asset-manager Trello Project Management These resources are available only to the BDRC Team and selected observers. if you require access, please request to jimk AT tbrc DOT org Audit Tool Asset Manager Other Images Other Documents Notes from 2018-9-07 Core Requirements docs These documents are maintained in a shared Google Drive Folder, Asset Manager Asset Manager v.01 Core Requirements Asset Manager v-1.0 Asset Manager Notes Clearest statement of workflow.","title":"References"},{"location":"resources/resources/#resources","text":"","title":"Resources"},{"location":"resources/resources/#source","text":"https://github.com/buda-base/asset-manager","title":"Source"},{"location":"resources/resources/#trello-project-management","text":"These resources are available only to the BDRC Team and selected observers. if you require access, please request to jimk AT tbrc DOT org","title":"Trello Project Management"},{"location":"resources/resources/#audit-tool","text":"","title":"Audit Tool"},{"location":"resources/resources/#asset-manager","text":"","title":"Asset Manager"},{"location":"resources/resources/#other-images","text":"","title":"Other Images"},{"location":"resources/resources/#other-documents","text":"Notes from 2018-9-07","title":"Other Documents"},{"location":"resources/resources/#core-requirements-docs","text":"These documents are maintained in a shared Google Drive Folder, Asset Manager Asset Manager v.01 Core Requirements Asset Manager v-1.0 Asset Manager Notes Clearest statement of workflow.","title":"Core Requirements docs"}]}